#ifndef __String_h__
#define __String_h__

#include<iostream>
using namespace std;

class MyString{
private:
	char* s;
public:
	MyString();
	void setstring(char s1[]);
	char* getstring();
	MyString& operator=(MyString s1);
	MyString& operator=(char* str);
	MyString& operator=(char c);
	char* begin();
	char* end();
	char* rbegin();
	char* rend();
	char* cbegin();
	char* cend();
	char* crbegin();
	char* crend();
	size_t size();
	size_t length();
	size_t max_size() const;
	void resize(size_t size1, char x);
	void resize(size_t size);
	size_t capacity() const;
	void reserve();
	void clear();
	bool empty();
	void shrink_to_fit();
	char& operator[](size_t pos);
	char& at(size_t pos);
	char& back();
	char& front();
	MyString& operator+=(MyString s1);
	MyString& operator+= (char* s1);
	MyString& operator+= (char c);
	MyString& append(MyString s1);
	MyString& append(MyString s1, size_t subpos, size_t sublen);
	MyString& append(char*str);
	MyString& append(char*str,size_t n);
	MyString& append(size_t n,char c);
	void push_back(char c);
	MyString& assign(MyString str);
	MyString& assign(MyString s1, size_t subpos, size_t sublen);
	MyString& assign(char* s);
	MyString& assign(char* s, size_t n);
	MyString& assign(size_t n, char c);
	MyString& insert(size_t pos, MyString s1);
	MyString& insert(size_t pos, MyString s1, size_t subpos, size_t sublen);
	MyString& insert(size_t pos, char* s1);
	MyString& insert(size_t pos, char* s1, size_t n);
	MyString& insert(size_t pos, size_t n, char c);
	MyString& erase(size_t pos, size_t len);
	MyString& replace(size_t pos, size_t len,MyString s1);
	MyString& replace(size_t pos, size_t len,MyString s1,size_t subpos, size_t sublen);
	MyString& replace(size_t pos, size_t len,char* s1);
	MyString& replace(size_t pos, size_t len,char* s1, size_t n);
	MyString& replace(size_t pos, size_t len, size_t n, char c);
	void swap(MyString& s1);
	void pop_back();
	char* c_str() const;
	char* data() const;
	size_t copy(char* s1, size_t len, size_t pos);
	size_t find(MyString s1, size_t pos=0);
	size_t find(char* s1, size_t pos = 0);
	size_t find(char* s1, size_t pos, size_t n);
	size_t find(char c, size_t pos = 0);
	size_t rfind(MyString s1, size_t pos = -1);
	size_t rfind(char* s1, size_t pos = -1);
	size_t rfind(char* s1, size_t n, size_t pos = -1);
	size_t rfind(char c, size_t pos = -1);
	size_t find_first_of(MyString s1, size_t pos = 0);
	size_t find_first_of(char* s1, size_t pos = 0);
	size_t find_first_of(char* s1, size_t pos, size_t n);
	size_t find_first_of(char c, size_t pos = 0);
	size_t find_last_of(MyString s1, size_t pos = -1);
	size_t find_last_of(char* s1, size_t pos = -1);
	size_t find_last_of(char* s1, size_t n, size_t pos = -1);
	size_t find_last_of(char c, size_t pos = -1);
	size_t find_first_not_of(MyString s1, size_t pos = 0);
	size_t find_first_not_of(char* s1, size_t pos = 0);
	size_t find_first_not_of(char* s1, size_t pos, size_t n);
	size_t find_first_not_of(char c, size_t pos = 0);
	size_t find_last_not_of(MyString s1, size_t pos=-1 );
	size_t find_last_not_of(char* s1, size_t pos=-1 );
	size_t find_last_not_of(char* s1, size_t n, size_t pos=-1);
	size_t find_last_not_of(char c, size_t pos =-1);
	MyString substr(size_t pos, size_t len);
	int compare(MyString s1);
	int compare(size_t pos, size_t len,MyString s1);
	int compare(size_t pos, size_t len,MyString s1,size_t subpos, size_t sublen);
	int compare(char* s1);
	int compare(size_t pos, size_t len,char* s1);
	int compare(size_t pos, size_t len,char* s1, size_t n);
	friend MyString operator+ (MyString lhs, MyString rhs);
	friend MyString operator+ (MyString lhs, char* rhs);
	friend MyString operator+ (char* lhs, MyString rhs);
	friend MyString operator+ (MyString lhs, char rhs);
	friend MyString operator+ (char lhs, MyString rhs);
	friend bool operator== (MyString lhs, MyString rhs);
	friend bool operator== (char*   lhs, MyString rhs);
	friend bool operator== (MyString lhs, char*   rhs);
	friend bool operator!= (MyString lhs, MyString rhs);
	friend bool operator!= (char*   lhs, MyString rhs);
	friend bool operator!= (MyString lhs, char*   rhs);
	friend bool operator<  (MyString lhs, MyString rhs);
	friend bool operator<  (char*   lhs, MyString rhs);
	friend bool operator<  (MyString lhs, char*   rhs);
	friend bool operator<= (MyString lhs, MyString rhs);
	friend bool operator<= (char*   lhs, MyString rhs);
	friend bool operator<= (MyString lhs, char*   rhs);
	friend bool operator>  (MyString lhs, MyString rhs);
	friend bool operator>  (char*   lhs, MyString rhs);
	friend bool operator>  (MyString lhs, char*   rhs);
	friend bool operator>= (MyString lhs, MyString rhs);
	friend bool operator>= (char*   lhs, MyString rhs);
	friend bool operator>= (MyString lhs, char*   rhs);
	friend void swap(MyString& x, MyString& y);
	friend istream& operator>> (istream& is, MyString& str);
	friend ostream& operator<< (ostream& os, MyString& str);
	friend istream& getline(istream& is, MyString& str, char delim);
	friend istream& getline(istream& is, MyString& str);
};
#endif